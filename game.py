from board.board import GameBoard
from pieces.pawn import Pawn
from pieces.bishop import Bishop
from pieces.rook import Rook
from pieces.knight import Knight
from pieces.king import King
from pieces.queen import Queen


class Game(object):
    def __init__(self):
        self.gameboard = GameBoard()
        self.black_team = self.generate_black_team()
        self.white_team = self.generate_white_team()

    def generate_white_team(self):
        pawn_row = self.gameboard.tiles[7]
        team = 'white'
        team_roster = []
        for _ in range(0, len(pawn_row)):
            this_tile = pawn_row[_]
            new_piece = Pawn(team)
            this_tile.set_occupant(new_piece)
            team_roster.append(new_piece)

        back_row_roster = self.generate_back_row(team)
        team_roster.append(back_row_roster)
        return team_roster

    def generate_black_team(self):
        pawn_row = self.gameboard.tiles[2]
        team = 'black'
        team_roster = []
        for _ in range(0, len(pawn_row)):
            this_tile = pawn_row[_]
            new_piece = Pawn(team)
            this_tile.set_occupant(new_piece)
            team_roster.append(new_piece)

        back_row_roster = self.generate_back_row(team)
        team_roster.append(back_row_roster)
        return team_roster

    def generate_back_row(self, team):
        """
        Generates the game pieces on the back row of the team.
        Because the row positions are identical for both teams, they can
        be generated by the same method.
        :return: a list of GamePiece objects
        """
        if team == 'white':
            back_row = self.gameboard.tiles[8]
        elif team == 'black':
            back_row = self.gameboard.tiles[1]

        back_row_roster = []
        left_rook = Rook(team)
        left_knight = Knight(team)
        left_bishop = Bishop(team)
        king = King(team)
        queen = Queen(team)
        right_bishop = Bishop(team)
        right_knight = Knight(team)
        right_rook = Rook(team)

        back_row[0].set_occupant(left_rook)
        back_row[1].set_occupant(left_knight)
        back_row[2].set_occupant(left_bishop)
        back_row[3].set_occupant(queen)
        back_row[4].set_occupant(king)
        back_row[5].set_occupant(right_bishop)
        back_row[6].set_occupant(right_knight)
        back_row[7].set_occupant(right_rook)

        back_row_roster.append(left_rook)
        back_row_roster.append(left_knight)
        back_row_roster.append(left_bishop)
        back_row_roster.append(queen)
        back_row_roster.append(king)
        back_row_roster.append(right_bishop)
        back_row_roster.append(right_knight)
        back_row_roster.append(right_rook)

        return back_row_roster